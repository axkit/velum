package velum

import (
	"github.com/axkit/velum/reflectx"
)

type Column struct {
	// Name is the name of the column in the database.
	Name string
	// Path is the path to the column in the struct.
	Path []int
	// Tag holds parsed tags from the struct field.
	Tag reflectx.TagPairs
	// ValueGenerationMethod is the method used to generate the value of
	// the column, if any.
	ValueGenerationMethod ColumnValueGenMethod
	// ValueGenerator is the name of a sequence or a stored function used to
	// generate the value of the column.
	ValueGenerator string
}

// SystemColumn describes a primary key column.
// It is a wrapper around the Column struct to add the position of the
// column in the columns slice.
type SystemColumn struct {
	*Column
	// Pos is the position of the column in the columns slice.
	Pos int
}

// IsValueGeneratedByDB returns true if the value of the column is generated by the database.
// This is used for the insert command.
func (c *Column) IsValueGeneratedByDB() bool {
	v := c.ValueGenerationMethod
	return v == SerialFieleType || v == UuidFileType || v == FriendlySequence || v == CustomSequece
}

// IsSystem returns true if the column is a system column.
// System columns are columns that are not part of the application data.
// They are used for versioning, soft delete, etc.
func (c *Column) IsSystem() bool {
	for _, s := range c.Tag.Get(scopeTagKey) {
		if IsSystemScope(Scope(s)) {
			return true
		}
	}
	return false
}

// InsertArgument returns the argument for the insert command if the value of the column is generated by the database.
// If the value is not generated by the database, it returns the regularParam.
func InsertArgument(genMethod ColumnValueGenMethod, valueGenerator string, regularParam string) (sqlParam string) {
	switch genMethod {
	case SerialFieleType:
		return "DEFAULT"
	case UuidFileType:
		return "gen_random_uuid()"
	case NoSequence:
		return regularParam
	}

	// CustomSequece, FriendlySequence:
	return "nextval('" + valueGenerator + "')"
}

func pkColValueGenMethod(genOptVal string, friendlySequence string) (method ColumnValueGenMethod, value string) {
	if genOptVal == "" {
		return FriendlySequence, friendlySequence
	}
	return colValueGenMethod(genOptVal)
}

func colValueGenMethod(genOptVal string) (method ColumnValueGenMethod, value string) {
	switch ColumnValueGenMethod(genOptVal) {
	case SerialFieleType:
		return SerialFieleType, "DEFAULT"
	case UuidFileType:
		return UuidFileType, "gen_random_uuid()"
	case NoSequence:
		return NoSequence, ""
	case "":
		return NoSequence, ""
	}
	return CustomSequece, genOptVal
}
